name: Api PoC workflow

on:
  push

jobs:
  setup-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github-actions
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Cache Python dependencies to speed up the workflow
      - name: Cache Python dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Set up Python environment (3.12)
      - name: Set up Python 3.12
        uses: actions/setup-python@v3
        with:
          python-version: '3.12'

      # Install Python dependencies
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
        continue-on-error: false  # If this step fails, the workflow will stop

      # Check Python version (optional)
      - name: Check Python version
        run: python --version
        if: success()  # Only run this if the previous step was successful

      # Run linting checks (pylint with Django plugin)
      - name: Run pylint
        run: pylint --load-plugins pylint_django --django-settings-module=api_poc.settings accounts api_poc seeder_script.py
        continue-on-error: true  # Allow the workflow to continue even if pylint fails

      # Run migrations to set up the database schema in PostgreSQL
      - name: Run migrations
        run: python manage.py migrate
        continue-on-error: false  # If this step fails, the workflow will stop

      # Run tests (unit tests, etc.) only if previous steps succeeded
      - name: Run tests
        run: python manage.py test
        if: success()  # Only run this if both 'Install dependencies' and 'Run migrations' succeeded

#  deploy:
#    runs-on: ubuntu-latest
#    needs: setup-and-test
#    if: success() # Deploy only if tests pass
#    steps:
#      # Checkout the code again for deployment steps
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      # Set up Python environment (optional if same version)
#      - name: Set up Python 3.12
#        uses: actions/setup-python@v3
#        with:
#          python-version: '3.12'
#
#      # Install dependencies for deployment
#      - name: Install dependencies
#        run: |
#          pip install --upgrade pip
#          pip install -r requirements.txt
#
#      # Run deployment tasks (e.g., Heroku, Docker, or other deployment methods)
#      - name: Deploy to Heroku (or other)
#        run: |
#          # Add your deployment script here
#          echo "Deploying application..."
